/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "BABYGEIST",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BABYGEIST__factory>;
    getContractFactory(
      name: "BABYGEISTDividendTracker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BABYGEISTDividendTracker__factory>;
    getContractFactory(
      name: "DividendPayingToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DividendPayingToken__factory>;
    getContractFactory(
      name: "DividendPayingTokenInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DividendPayingTokenInterface__factory>;
    getContractFactory(
      name: "DividendPayingTokenOptionalInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DividendPayingTokenOptionalInterface__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;

    getContractAt(
      name: "BABYGEIST",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BABYGEIST>;
    getContractAt(
      name: "BABYGEISTDividendTracker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BABYGEISTDividendTracker>;
    getContractAt(
      name: "DividendPayingToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DividendPayingToken>;
    getContractAt(
      name: "DividendPayingTokenInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DividendPayingTokenInterface>;
    getContractAt(
      name: "DividendPayingTokenOptionalInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DividendPayingTokenOptionalInterface>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
