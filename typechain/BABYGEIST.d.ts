/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BABYGEISTInterface extends ethers.utils.Interface {
  functions: {
    "GEIST()": FunctionFragment;
    "GEISTRewardsFee()": FunctionFragment;
    "_isBlacklisted(address)": FunctionFragment;
    "_marketingWalletAddress()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "automatedMarketMakerPairs(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blacklistAddress(address,bool)": FunctionFragment;
    "claim()": FunctionFragment;
    "deadWallet()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "dividendTokenBalanceOf(address)": FunctionFragment;
    "dividendTracker()": FunctionFragment;
    "excludeFromDividends(address)": FunctionFragment;
    "excludeFromFees(address,bool)": FunctionFragment;
    "excludeMultipleAccountsFromFees(address[],bool)": FunctionFragment;
    "gasForProcessing()": FunctionFragment;
    "getAccountDividendsInfo(address)": FunctionFragment;
    "getAccountDividendsInfoAtIndex(uint256)": FunctionFragment;
    "getClaimWait()": FunctionFragment;
    "getLastProcessedIndex()": FunctionFragment;
    "getNumberOfDividendTokenHolders()": FunctionFragment;
    "getTotalDividendsDistributed()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isExcludedFromFees(address)": FunctionFragment;
    "liquidityFee()": FunctionFragment;
    "marketingFee()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "processDividendTracker(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAutomatedMarketMakerPair(address,bool)": FunctionFragment;
    "setGEISTRewardsFee(uint256)": FunctionFragment;
    "setLiquiditFee(uint256)": FunctionFragment;
    "setMarketingFee(uint256)": FunctionFragment;
    "setMarketingWallet(address)": FunctionFragment;
    "swapTokensAtAmount()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalFees()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV2Pair()": FunctionFragment;
    "uniswapV2Router()": FunctionFragment;
    "updateClaimWait(uint256)": FunctionFragment;
    "updateDividendTracker(address)": FunctionFragment;
    "updateGasForProcessing(uint256)": FunctionFragment;
    "updateUniswapV2Router(address)": FunctionFragment;
    "withdrawableDividendOf(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "GEIST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "GEISTRewardsFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_isBlacklisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_marketingWalletAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "automatedMarketMakerPairs",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "blacklistAddress",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deadWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dividendTokenBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "dividendTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromDividends",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFees",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeMultipleAccountsFromFees",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "gasForProcessing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountDividendsInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountDividendsInfoAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimWait",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastProcessedIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfDividendTokenHolders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDividendsDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketingFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processDividendTracker",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAutomatedMarketMakerPair",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGEISTRewardsFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquiditFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketingWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensAtAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateClaimWait",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDividendTracker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGasForProcessing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUniswapV2Router",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawableDividendOf",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "GEIST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GEISTRewardsFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_marketingWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "automatedMarketMakerPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deadWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dividendTokenBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dividendTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeMultipleAccountsFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasForProcessing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountDividendsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountDividendsInfoAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimWait",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastProcessedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfDividendTokenHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDividendsDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processDividendTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutomatedMarketMakerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGEISTRewardsFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquiditFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensAtAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateClaimWait",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDividendTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGasForProcessing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawableDividendOf",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ExcludeFromFees(address,bool)": EventFragment;
    "ExcludeMultipleAccountsFromFees(address[],bool)": EventFragment;
    "GasForProcessingUpdated(uint256,uint256)": EventFragment;
    "LiquidityWalletUpdated(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProcessedDividendTracker(uint256,uint256,uint256,bool,uint256,address)": EventFragment;
    "SendDividends(uint256,uint256)": EventFragment;
    "SetAutomatedMarketMakerPair(address,bool)": EventFragment;
    "SwapAndLiquify(uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UpdateDividendTracker(address,address)": EventFragment;
    "UpdateUniswapV2Router(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExcludeFromFees"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExcludeMultipleAccountsFromFees"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasForProcessingUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityWalletUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessedDividendTracker"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendDividends"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetAutomatedMarketMakerPair"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndLiquify"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDividendTracker"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateUniswapV2Router"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type ExcludeFromFeesEvent = TypedEvent<
  [string, boolean] & { account: string; isExcluded: boolean }
>;

export type ExcludeMultipleAccountsFromFeesEvent = TypedEvent<
  [string[], boolean] & { accounts: string[]; isExcluded: boolean }
>;

export type GasForProcessingUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { newValue: BigNumber; oldValue: BigNumber }
>;

export type LiquidityWalletUpdatedEvent = TypedEvent<
  [string, string] & { newLiquidityWallet: string; oldLiquidityWallet: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ProcessedDividendTrackerEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, boolean, BigNumber, string] & {
    iterations: BigNumber;
    claims: BigNumber;
    lastProcessedIndex: BigNumber;
    automatic: boolean;
    gas: BigNumber;
    processor: string;
  }
>;

export type SendDividendsEvent = TypedEvent<
  [BigNumber, BigNumber] & { tokensSwapped: BigNumber; amount: BigNumber }
>;

export type SetAutomatedMarketMakerPairEvent = TypedEvent<
  [string, boolean] & { pair: string; value: boolean }
>;

export type SwapAndLiquifyEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    tokensSwapped: BigNumber;
    ethReceived: BigNumber;
    tokensIntoLiqudity: BigNumber;
  }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export type UpdateDividendTrackerEvent = TypedEvent<
  [string, string] & { newAddress: string; oldAddress: string }
>;

export type UpdateUniswapV2RouterEvent = TypedEvent<
  [string, string] & { newAddress: string; oldAddress: string }
>;

export class BABYGEIST extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BABYGEISTInterface;

  functions: {
    GEIST(overrides?: CallOverrides): Promise<[string]>;

    GEISTRewardsFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    _marketingWalletAddress(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    blacklistAddress(
      account: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deadWallet(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dividendTokenBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dividendTracker(overrides?: CallOverrides): Promise<[string]>;

    excludeFromDividends(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    excludeMultipleAccountsFromFees(
      accounts: string[],
      excluded: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gasForProcessing(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAccountDividendsInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    getAccountDividendsInfoAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    getClaimWait(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastProcessedIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNumberOfDividendTokenHolders(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalDividendsDistributed(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    marketingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    processDividendTracker(
      gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGEISTRewardsFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquiditFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketingFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketingWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapTokensAtAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<[string]>;

    uniswapV2Router(overrides?: CallOverrides): Promise<[string]>;

    updateClaimWait(
      claimWait: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDividendTracker(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateGasForProcessing(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUniswapV2Router(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawableDividendOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  GEIST(overrides?: CallOverrides): Promise<string>;

  GEISTRewardsFee(overrides?: CallOverrides): Promise<BigNumber>;

  _isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  _marketingWalletAddress(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  automatedMarketMakerPairs(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  blacklistAddress(
    account: string,
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deadWallet(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dividendTokenBalanceOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dividendTracker(overrides?: CallOverrides): Promise<string>;

  excludeFromDividends(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  excludeFromFees(
    account: string,
    excluded: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  excludeMultipleAccountsFromFees(
    accounts: string[],
    excluded: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gasForProcessing(overrides?: CallOverrides): Promise<BigNumber>;

  getAccountDividendsInfo(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  getAccountDividendsInfoAtIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  getClaimWait(overrides?: CallOverrides): Promise<BigNumber>;

  getLastProcessedIndex(overrides?: CallOverrides): Promise<BigNumber>;

  getNumberOfDividendTokenHolders(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalDividendsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isExcludedFromFees(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

  marketingFee(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  processDividendTracker(
    gas: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAutomatedMarketMakerPair(
    pair: string,
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGEISTRewardsFee(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquiditFee(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketingFee(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketingWallet(
    wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapTokensAtAmount(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalFees(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

  uniswapV2Router(overrides?: CallOverrides): Promise<string>;

  updateClaimWait(
    claimWait: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDividendTracker(
    newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateGasForProcessing(
    newValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUniswapV2Router(
    newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawableDividendOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    GEIST(overrides?: CallOverrides): Promise<string>;

    GEISTRewardsFee(overrides?: CallOverrides): Promise<BigNumber>;

    _isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    _marketingWalletAddress(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    blacklistAddress(
      account: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(overrides?: CallOverrides): Promise<void>;

    deadWallet(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dividendTokenBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dividendTracker(overrides?: CallOverrides): Promise<string>;

    excludeFromDividends(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    excludeMultipleAccountsFromFees(
      accounts: string[],
      excluded: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    gasForProcessing(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountDividendsInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    getAccountDividendsInfoAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    getClaimWait(overrides?: CallOverrides): Promise<BigNumber>;

    getLastProcessedIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfDividendTokenHolders(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDividendsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    marketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    processDividendTracker(
      gas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setGEISTRewardsFee(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquiditFee(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketingFee(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketingWallet(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokensAtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

    uniswapV2Router(overrides?: CallOverrides): Promise<string>;

    updateClaimWait(
      claimWait: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDividendTracker(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateGasForProcessing(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUniswapV2Router(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawableDividendOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "ExcludeFromFees(address,bool)"(
      account?: string | null,
      isExcluded?: null
    ): TypedEventFilter<
      [string, boolean],
      { account: string; isExcluded: boolean }
    >;

    ExcludeFromFees(
      account?: string | null,
      isExcluded?: null
    ): TypedEventFilter<
      [string, boolean],
      { account: string; isExcluded: boolean }
    >;

    "ExcludeMultipleAccountsFromFees(address[],bool)"(
      accounts?: null,
      isExcluded?: null
    ): TypedEventFilter<
      [string[], boolean],
      { accounts: string[]; isExcluded: boolean }
    >;

    ExcludeMultipleAccountsFromFees(
      accounts?: null,
      isExcluded?: null
    ): TypedEventFilter<
      [string[], boolean],
      { accounts: string[]; isExcluded: boolean }
    >;

    "GasForProcessingUpdated(uint256,uint256)"(
      newValue?: BigNumberish | null,
      oldValue?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { newValue: BigNumber; oldValue: BigNumber }
    >;

    GasForProcessingUpdated(
      newValue?: BigNumberish | null,
      oldValue?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { newValue: BigNumber; oldValue: BigNumber }
    >;

    "LiquidityWalletUpdated(address,address)"(
      newLiquidityWallet?: string | null,
      oldLiquidityWallet?: string | null
    ): TypedEventFilter<
      [string, string],
      { newLiquidityWallet: string; oldLiquidityWallet: string }
    >;

    LiquidityWalletUpdated(
      newLiquidityWallet?: string | null,
      oldLiquidityWallet?: string | null
    ): TypedEventFilter<
      [string, string],
      { newLiquidityWallet: string; oldLiquidityWallet: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "ProcessedDividendTracker(uint256,uint256,uint256,bool,uint256,address)"(
      iterations?: null,
      claims?: null,
      lastProcessedIndex?: null,
      automatic?: boolean | null,
      gas?: null,
      processor?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, boolean, BigNumber, string],
      {
        iterations: BigNumber;
        claims: BigNumber;
        lastProcessedIndex: BigNumber;
        automatic: boolean;
        gas: BigNumber;
        processor: string;
      }
    >;

    ProcessedDividendTracker(
      iterations?: null,
      claims?: null,
      lastProcessedIndex?: null,
      automatic?: boolean | null,
      gas?: null,
      processor?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, boolean, BigNumber, string],
      {
        iterations: BigNumber;
        claims: BigNumber;
        lastProcessedIndex: BigNumber;
        automatic: boolean;
        gas: BigNumber;
        processor: string;
      }
    >;

    "SendDividends(uint256,uint256)"(
      tokensSwapped?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tokensSwapped: BigNumber; amount: BigNumber }
    >;

    SendDividends(
      tokensSwapped?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tokensSwapped: BigNumber; amount: BigNumber }
    >;

    "SetAutomatedMarketMakerPair(address,bool)"(
      pair?: string | null,
      value?: boolean | null
    ): TypedEventFilter<[string, boolean], { pair: string; value: boolean }>;

    SetAutomatedMarketMakerPair(
      pair?: string | null,
      value?: boolean | null
    ): TypedEventFilter<[string, boolean], { pair: string; value: boolean }>;

    "SwapAndLiquify(uint256,uint256,uint256)"(
      tokensSwapped?: null,
      ethReceived?: null,
      tokensIntoLiqudity?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        tokensSwapped: BigNumber;
        ethReceived: BigNumber;
        tokensIntoLiqudity: BigNumber;
      }
    >;

    SwapAndLiquify(
      tokensSwapped?: null,
      ethReceived?: null,
      tokensIntoLiqudity?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        tokensSwapped: BigNumber;
        ethReceived: BigNumber;
        tokensIntoLiqudity: BigNumber;
      }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    "UpdateDividendTracker(address,address)"(
      newAddress?: string | null,
      oldAddress?: string | null
    ): TypedEventFilter<
      [string, string],
      { newAddress: string; oldAddress: string }
    >;

    UpdateDividendTracker(
      newAddress?: string | null,
      oldAddress?: string | null
    ): TypedEventFilter<
      [string, string],
      { newAddress: string; oldAddress: string }
    >;

    "UpdateUniswapV2Router(address,address)"(
      newAddress?: string | null,
      oldAddress?: string | null
    ): TypedEventFilter<
      [string, string],
      { newAddress: string; oldAddress: string }
    >;

    UpdateUniswapV2Router(
      newAddress?: string | null,
      oldAddress?: string | null
    ): TypedEventFilter<
      [string, string],
      { newAddress: string; oldAddress: string }
    >;
  };

  estimateGas: {
    GEIST(overrides?: CallOverrides): Promise<BigNumber>;

    GEISTRewardsFee(overrides?: CallOverrides): Promise<BigNumber>;

    _isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _marketingWalletAddress(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    blacklistAddress(
      account: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deadWallet(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dividendTokenBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dividendTracker(overrides?: CallOverrides): Promise<BigNumber>;

    excludeFromDividends(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    excludeMultipleAccountsFromFees(
      accounts: string[],
      excluded: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gasForProcessing(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountDividendsInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountDividendsInfoAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimWait(overrides?: CallOverrides): Promise<BigNumber>;

    getLastProcessedIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfDividendTokenHolders(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDividendsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    marketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    processDividendTracker(
      gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGEISTRewardsFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquiditFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketingFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketingWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapTokensAtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>;

    updateClaimWait(
      claimWait: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDividendTracker(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateGasForProcessing(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUniswapV2Router(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawableDividendOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    GEIST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GEISTRewardsFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _isBlacklisted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _marketingWalletAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blacklistAddress(
      account: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deadWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dividendTokenBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dividendTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeFromDividends(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    excludeMultipleAccountsFromFees(
      accounts: string[],
      excluded: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gasForProcessing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountDividendsInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountDividendsInfoAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimWait(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastProcessedIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfDividendTokenHolders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDividendsDistributed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processDividendTracker(
      gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGEISTRewardsFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquiditFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketingFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketingWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensAtAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateClaimWait(
      claimWait: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDividendTracker(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateGasForProcessing(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUniswapV2Router(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawableDividendOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
